#
# Copyright 2020 New Relic Corporation. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#

#
# This is the workflow to do a release build.
#
---
name: NEW release_CI

#
# Control when the action will run.
#
on:
  #
  # Run this workflow manually from the Actions tab or using the API
  #
  workflow_dispatch:

jobs:
  # GHA might be better to create sperarate jobs per image?
  # GHA creat a matrix value for the various images
  # agent_release:
  #   env:
  #     # GHA we need to add the various PHP versions supported to PHP_VER
  #     PHP_VER: ${{ matrix.php_ver }}
  #     ARCH: ${{ matrix.arch }}
  #     BUILD_TYPE: release
  #     OS: ${{ matrix.os }}
  #     image_name: ${{ matrix.os }}:${{ matrix.php_ver }}${{ matrix.arch }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       os: [linux]
  #       php_ver: ['7.0', '7.1', '7.2', '7.3', '7.4', '8.0', '8.0-zts']
  #       # GHA we'll need to exclude some combinations I believe
  #       # Check the arch for the new docker images
  #       arch: [x64, x86]
  #   steps:
  #     - name: Checkout PHP Agent Repo
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ github.event.client_payload.ref }}
  #     # GHA No need to build these images? everything should be installed
  #     - name: Build Custom Docker Image
  #       run: docker build --build-arg ARCH=$ARCH --build-arg PHP_VER=$PHP_VER --build-arg BUILD_TYPE=$BUILD_TYPE -f ./.github/docker/${OS}/${ARCH}/Dockerfile -t $image_name .
  #     - name: Build and Test
  #       run: docker run --name runtest --workdir /github/workspace --rm -e GITHUB_WORKSPACE -e GITHUB_ENV -v "${GITHUB_WORKSPACE}":"/github/workspace" $image_name
  #     - name: Save build artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{ matrix.php_ver }}binaries
  #         path: releases
  #         if-no-files-found: error

  agent_release_by_image:
    env:
      # GHA we need to add the various PHP versions supported to PHP_VER
      PHP_VER: ${{ matrix.php_ver }}
      ARCH: ${{ matrix.arch }}
      BUILD_TYPE: release
      OS: ${{ matrix.os }}
      image_name: ${{ matrix.os }}:${{ matrix.php_ver }}${{ matrix.arch }}
    runs-on: ubuntu-latest
    container:  ## kds = testing using private docker image
      image: ${{ matrix.registry }}/${{ matrix.image }}
      credentials:
        username: ${{ secrets.DOCKER_REPO_USER }}
        password: ${{ secrets.DOCKER_USER_TOKEN }}
    strategy:
      matrix:
        registry: [mycirrus]
        image: [newrelic:nr-alpine-3.14--1.0]
        os: [linux]
        # php_ver: ['7.0', '7.1', '7.2', '7.3', '7.4', '8.0', '8.0-zts']
        php_ver: ['7.0']
        # GHA we'll need to exclude some combinations I believe
        # Check the arch for the new docker images
        arch: [x64, x86]
    steps:
      - name: Checkout PHP Agent Repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.ref }}
      # GHA No need to build these images? everything should be installed
      # - name: Build Custom Docker Image
      #   run: docker build --build-arg ARCH=$ARCH --build-arg PHP_VER=$PHP_VER --build-arg BUILD_TYPE=$BUILD_TYPE -f ./.github/docker/${OS}/${ARCH}/Dockerfile -t $image_name .
      - name: Build and Test
        run: |
          cd / && ls -la

      # - name: Save build artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ matrix.php_ver }}binaries
      #     path: releases
      #     if-no-files-found: error

  # GHA renamed for better readability â‡“
  # combine-artifacts:
  #   if: ${{ always() }}
  #   runs-on: ubuntu-latest
  #   name: Combine artifacts from matrix build
  #   needs: agent_release
  #   steps:
  #     - name: Create directory
  #       run: mkdir releases
  #     - name: Download to directory
  #       uses: actions/download-artifact@v2
  #       with:
  #         path: releases
  #     - run: sudo apt install tree
  #     - run: tree
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: $GITHUB_SHA
  #         path: releases
  #         if-no-files-found: error
