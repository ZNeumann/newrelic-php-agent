# GHA: Testing new deply agent functionality
# php-release-agent-checkout
---

name: deploy-agent-testing-caller

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  # push:
  #   branches: [gha-testing]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deploy-agent-testing:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Checkout the NR centralized actions/workflow repo
      - name: Checkout private actions repository
        uses: actions/checkout@v2
        with:
          repository: newrelic/newrelic-actions
          ref: main
          # Must add this or other token to any repo wishing to access
          # this provate repository
          token: ${{ secrets.API_CLI_TOKEN }}
          path: newrelic-actions

      # Verify newrelic-actions-actions directory
      - name: Verify newrelic-actions directory and check gh cli version
        run: |
          gh --version
          ls -la newrelic-actions/

      # First method: Testing workflow_trigger action to get external artifacts
      # Then trigger the deploy-linux workflow
      # IMPORTANT TO CONSIDER:
      # Remember, called workflows operate within their own workspace
      # This is an action that CALLS other workfows, running in the called WORKSPACE
      # while it may bepossible to generate artifacts in another workflow, they
      # will always have to be downloaded explicitly
      # in the caller workflow workspace.


      # The called workflow for dotnet requires artifacts generated from
      # github/newrelic/fork-newrelic-dotnet-agent/.github/workflows/all_solutions.yml
      # Do we have an equivalent for PHP?
      # Do we call that workflow first to generate required artifacts.
      - name: "Method 1, step 1: Call get-external-artifacts"
        uses: ./newrelic-actions/workflow_trigger_beta_v1
        with:
          # called_repo: github.com/kentonshade/gha
          access_token: ${{ secrets.API_CLI_TOKEN }}
          called_workflow: get-external-artifacts.yml
          refresh_interval: 30
          # add fields to pass to called workflow via dispatch
          # FIELD_1: agent_version=
          # FIELD_2: run_id=
          # FIELD_3: download_repo=
          # FIELD_4: download_repo_token=
          # FIELD_5: download_called_workflow=
          # FIELD_6: download_artifact_name=
          # FIELD_7: local_upload_artifact_name=
          # FIELD_8: local_upload_deploy_name=

      # While this should work, check with the team about
      # appropriate level of detail needed in returned monitoring
      # of the called worflow
      # NOTE THIS WILL NOT WORK IN ITS CURRENT STATE
      # IF THE WORKFLOW IS NON-LOCAL
      - name: "Method 1, step 2: Call get-external-artifacts"
        uses: ./newrelic-actions/workflow_trigger_beta_v1
        with:
          # called_repo: github.com/kentonshade/gha
          access_token: ${{ secrets.API_CLI_TOKEN }}
          called_workflow: deploy-linux.yml
          refresh_interval: 30
          # add fields to pass to called workflow via dispatch


      # Second method: Testing deploy agent composite action
      # Call the get external artifacts via workflow_trigger first
      - name: "Method 2, step 2: Testing the deploy agent action"
        uses: ./newrelic-actions/deploy_agent_beta_v1
        with:
          access_token: ${{ secrets.API_CLI_TOKEN }}
          linux_deploy_to_production: false
          deploy: false
          # agent_version:
          # prod_main_s3:
          # linux_aws_access_key_id:
          # linux_aws_secret_access_key:
          # test_s3_bucket:
          # test_bucket_aws_access_key:
          # test_bucket_aws_secret_access_key:
